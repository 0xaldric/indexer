enum AccountStatus {
    ACTIVE
    UNINIT
    FROZEN
    NON_EXIST
}

type Account {
    address: String!

    isActive: Boolean!
    status: AccountStatus!

    balance: Uint64

    lastTxLT: Uint64
    lastTxHash: String

    stateHash: String

    code: String
    codeHash: String
    data: String
    dataHash: String

    contractTypes: [String]
}

input AccountFilter {
    address: String

    lastTxLT: Uint64
    lastTxHash: String

    # set this flag as true, if you want to filter out old account states
    latestState: Boolean

    status: AccountStatus

    contractTypes: [String]
}

type AccountAggregation {
    count: Int

    addressUniqCount: Int

    balanceMin: Uint64
    balanceMax: Uint64
    balanceSum: Uint64
}

interface AccountData {
    address: String!
    lastTxLT: Uint64!
    lastTxHash: String!
}

input AccountDataFilter {
    address: String

    lastTxLT: Uint64
    lastTxHash: String

    latestState: Boolean

    contractTypes: [String]!

    # search nft items or collections by its owner
    ownerAddress: String
    # search nft items or collections by its editor
    editorAddress: String
    # search nft items by collection address
    collectionAddress: String
}

union AccountDataAggregation =
    NFTCollectionDataAggregate | NFTItemDataAggregate
